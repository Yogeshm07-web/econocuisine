<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Inventory Management</title>
  <!-- Bootstrap CSS -->
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <!-- Custom CSS -->
  <style>
    /* Custom CSS */
    body {
      font-family: 'Roboto', sans-serif; /* Apply Roboto font to the entire document */
    }

    .background-image {
      position: relative;
      width: 100%;
      height: 100vh;
      background-image: url('<%= cl_image_path("vqtpdq8z9z6zjz49zbol", width: 1920, height: 1080, crop: :fill) %>'); /* Adjust width and height as needed */
      background-size: contain; /* Fit the image within the container */
      background-repeat: no-repeat; /* Prevent image from repeating */
      background-position: center; /* Center the image */
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 20px;
      color: white; /* Set text color to white for better visibility */
      text-align: center;
    }

    /* Add more styles as needed */
  </style>
</head>
<body>

  <div class="background-image">

    <!-- Include the form for adding new inventory items -->
    <%= render 'form', inventory: @inventory %>

    <table class="table" id="inventory-table">
      <thead>
        <tr>
          <th>Name</th>
          <th>Quantity</th>
          <th>Quantity Unit</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="inventory-table-body">
        <!-- Render existing inventory items -->
        <%= render @inventory_items %>
      </tbody>
    </table>

    <form id="new-inventory-item-form">
      <!-- Form for adding new inventory items -->
      <select id="product-list" name="product_id">
        <% @products.each do |product| %>
          <option value="<%= product.id %>"><%= product.name %></option>
        <% end %>
      </select>
      <input type="number" id="quantity" name="quantity" required placeholder="Quantity">
      <!-- Dropdown for selecting quantity unit -->
      <select id="quantity-unit" name="quantity-unit" required>
        <option value="">Select Quantity Unit</option>
        <option value="kg">kg</option>
        <option value="g">g</option>
        <option value="pcs">pcs</option>
        <!-- Add more options as needed -->
      </select>
      <!-- Button with dynamic color based on product name -->
      <button type="button" id="add-to-inventory-btn" class="btn btn-secondary">Add to Inventory</button>
    </form>
  </div>

  <!-- JavaScript code -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const quantityInput = document.getElementById('quantity');
      const productSelect = document.getElementById('product-list');
      const quantityUnitInput = document.getElementById('quantity-unit');
      const addToInventoryBtn = document.getElementById('add-to-inventory-btn');
      const inventoryTableBody = document.getElementById('inventory-table-body');

      productSelect.addEventListener('change', function() {
        const productName = this.options[this.selectedIndex].text;
        updateButtonColor(productName);
      });

      addToInventoryBtn.addEventListener('click', addToInventory);

      function updateButtonColor(productName) {
        const btn = addToInventoryBtn;
        const color = productName.charAt(0).toLowerCase();
        btn.style.backgroundColor = getColorCode(color);
      }

      function getColorCode(character) {
        switch (character) {
          case 'a': return 'red';
          case 'b': return 'blue';
          case 'c': return 'green';
          default: return 'blue';
        }
      }

      function addToInventory() {
        const quantity = parseInt(quantityInput.value);
        const productName = productSelect.options[productSelect.selectedIndex].text;
        const quantityUnit = quantityUnitInput.value.trim();
        if (isNaN(quantity) || quantity <= 0 || !quantityUnit) {
          alert('Please enter a valid quantity and quantity unit.');
          return;
        }
        const newItemData = {
          productName: productName,
          quantity: quantity,
          quantityUnit: quantityUnit
        };
        addNewInventoryItem(newItemData);
        document.getElementById('new-inventory-item-form').reset();
      }

      function addNewInventoryItem(item) {
        const newRow = document.createElement('tr');
        newRow.innerHTML = `
          <td>${item.productName}</td>
          <td>${item.quantity}</td>
          <td>${item.quantityUnit}</td>
          <td>
            <button type="button" class="edit-btn">Edit</button>
            <button type="button" class="save-btn" style="display: none;">Save</button>
            <button type="button" class="delete-btn">Delete</button>
          </td>
        `;
        inventoryTableBody.appendChild(newRow);
        newRow.querySelector('.edit-btn').addEventListener('click', function() {
          editInventoryItem(newRow);
        });
        newRow.querySelector('.save-btn').addEventListener('click', function() {
          saveInventoryItem(newRow);
        });
        newRow.querySelector('.delete-btn').addEventListener('click', function() {
          deleteInventoryItem(newRow);
        });
      }

      function editInventoryItem(row) {
        const nameCell = row.cells[0];
        const quantityCell = row.cells[1];
        const quantityUnitCell = row.cells[2];
        const nameInput = document.createElement('input');
        nameInput.type = 'text';
        nameInput.value = nameCell.textContent.trim();
        const quantityInput = document.createElement('input');
        quantityInput.type = 'number';
        quantityInput.value = quantityCell.textContent;
        const quantityUnitInput = document.createElement('input');
        quantityUnitInput.type = 'text';
        quantityUnitInput.value = quantityUnitCell.textContent;
        nameCell.textContent = '';
        quantityCell.textContent = '';
        quantityUnitCell.textContent = '';
        nameCell.appendChild(nameInput);
        quantityCell.appendChild(quantityInput);
        quantityUnitCell.appendChild(quantityUnitInput);
        row.querySelector('.edit-btn').style.display = 'none';
        row.querySelector('.save-btn').style.display = 'inline-block';
      }

      function saveInventoryItem(row) {
        const nameCell = row.cells[0];
        const quantityCell = row.cells[1];
        const quantityUnitCell = row.cells[2];
        const nameInput = nameCell.querySelector('input');
        const quantityInput = quantityCell.querySelector('input');
        const quantityUnitInput = quantityUnitCell.querySelector('input');
        nameCell.textContent = nameInput.value;
        quantityCell.textContent = quantityInput.value;
        quantityUnitCell.textContent = quantityUnitInput.value;
        row.querySelector('.edit-btn').style.display = 'inline-block';
        row.querySelector('.save-btn').style.display = 'none';
      }

      function deleteInventoryItem(row) {
        row.remove();
      }
    });
  </script>

</body>
</html>
