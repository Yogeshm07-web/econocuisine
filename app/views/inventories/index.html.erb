<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>E-Commerce Inventory Management</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f8f9fa;
      color: #333;
    }
    .background-image {
      background-color: #343a40;
      padding: 20px;
      text-align: center;
      color: white;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
    }
    .nice-div {
      background-color: #fff;
      border-radius: 10px;
      padding: 20px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      margin-bottom: 20px;
    }
    .nice-div h2 {
      color: #333;
      font-size: 24px;
      margin-bottom: 20px;
    }
    #inventory-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }
    #inventory-table th, #inventory-table td {
      padding: 8px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }
    #inventory-table th {
      background-color: #f2f2f2;
      font-weight: bold;
      color: #333;
    }
    .edit-btn, .save-btn, .delete-btn {
      padding: 6px 10px;
      cursor: pointer;
      border: none;
      border-radius: 4px;
      font-size: 14px;
      transition: background-color 0.3s ease;
    }
    .edit-btn {
      background-color: #007bff;
      color: #fff;
    }
    .edit-btn:hover {
      background-color: #0056b3;
    }
    .save-btn {
      background-color: #28a745;
      color: #fff;
    }
    .save-btn:hover {
      background-color: #218838;
    }
    .delete-btn {
      background-color: #dc3545;
      color: #fff;
    }
    .delete-btn:hover {
      background-color: #c82333;
    }
  </style>
</head>
<body>
  <div class="background-image">
    <div class="container">
      <a href="/" class="home-link">
        <span class="home-icon">üè†</span>
        <span class="home-text">Back to Home</span>
      </a>
      <div class="nice-div">
        <h2>Welcome to our Inventory Management System</h2>
        <!-- Add more content here if needed -->
      </div>
      <!-- Include the form for adding new inventory items -->
      <%= render 'form', inventory: @inventory %>
      <table class="table" id="inventory-table">
        <thead>
          <tr>
            <th>Name</th>
            <th>Quantity</th>
            <th>Quantity Unit</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="inventory-table-body">
          <!-- Render existing inventory items -->
          <%= render @inventory_items %>
        </tbody>
      </table>
      <form id="new-inventory-item-form">
        <!-- Form for adding new inventory items -->
        <select id="product-list" name="product_id">
          <% @products.each do |product| %>
            <option value="<%= product.id %>"><%= product.name %></option>
          <% end %>
        </select>
        <input type="number" id="quantity" name="quantity" required placeholder="Quantity">
        <!-- Dropdown for selecting quantity unit -->
        <select id="quantity-unit" name="quantity-unit" required>
          <option value="">Select Quantity Unit</option>
          <option value="kg">kg</option>
          <option value="g">g</option>
          <option value="pcs">pcs</option>
          <option value="pc">pc</option>
          <option value="L">L</option>
          <option value="CL">CL</option>
          <!-- Add more options as needed -->
        </select>
        <!-- Button with dynamic color based on product name -->
        <button type="button" id="add-to-inventory-btn" class="btn btn-primary">Add to Inventory</button>
      </form>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const quantityInput = document.getElementById('quantity');
      const productSelect = document.getElementById('product-list');
      const quantityUnitInput = document.getElementById('quantity-unit');
      const addToInventoryBtn = document.getElementById('add-to-inventory-btn');
      const inventoryTableBody = document.getElementById('inventory-table-body');

      addToInventoryBtn.addEventListener('click', function() {
        addToInventory();
      });

      function addToInventory() {
        const quantity = parseInt(quantityInput.value);
        const productName = productSelect.options[productSelect.selectedIndex].text;
        const quantityUnit = quantityUnitInput.value.trim();
        if (isNaN(quantity) || quantity <= 0 || !quantityUnit) {
          alert('Please enter a valid quantity and quantity unit.');
          return;
        }
        const newItemData = {
          productName: productName,
          quantity: quantity,
          quantityUnit: quantityUnit
        };
        addNewInventoryItem(newItemData);
        // Clear input fields after adding
        quantityInput.value = '';
        quantityUnitInput.value = '';
        saveToLocalStorage(); // Call saveToLocalStorage after adding
      }

      function addNewInventoryItem(item) {
        const newRow = document.createElement('tr');
        newRow.innerHTML = `
          <td>${item.productName}</td>
          <td>${item.quantity}</td>
          <td>${item.quantityUnit}</td>
          <td>
            <button type="button" class="edit-btn">Edit</button>
            <button type="button" class="save-btn" style="display: none;">Save</button>
            <button type="button" class="delete-btn">Delete</button>
          </td>
        `;
        inventoryTableBody.appendChild(newRow);
        newRow.querySelector('.edit-btn').addEventListener('click', function() {
          editInventoryItem(newRow);
        });
        newRow.querySelector('.save-btn').addEventListener('click', function() {
          saveInventoryItem(newRow);
        });
        newRow.querySelector('.delete-btn').addEventListener('click', function() {
          deleteInventoryItem(newRow);
        });
      }

      function editInventoryItem(row) {
        const cells = row.cells;
        const productName = cells[0].textContent;
        const quantity = cells[1].textContent;
        const quantityUnit = cells[2].textContent;

        cells[0].innerHTML = `<input type="text" value="${productName}">`;
        cells[1].innerHTML = `<input type="number" value="${quantity}">`;
        cells[2].innerHTML = `<input type="text" value="${quantityUnit}">`;

        row.querySelector('.edit-btn').style.display = 'none';
        row.querySelector('.save-btn').style.display = 'inline-block';
      }

      function saveInventoryItem(row) {
        const cells = row.cells;
        const productName = cells[0].querySelector('input').value;
        const quantity = cells[1].querySelector('input').value;
        const quantityUnit = cells[2].querySelector('input').value;

        cells[0].textContent = productName;
        cells[1].textContent = quantity;
        cells[2].textContent = quantityUnit;

        row.querySelector('.edit-btn').style.display = 'inline-block';
        row.querySelector('.save-btn').style.display = 'none';

        saveToLocalStorage(); // Call saveToLocalStorage after editing
      }

      function deleteInventoryItem(row) {
        row.remove();
        saveToLocalStorage(); // Call saveToLocalStorage after deleting
      }

      // Save to local storage
      function saveToLocalStorage() {
        const inventoryData = [];
        const rows = document.querySelectorAll('#inventory-table-body tr');
        rows.forEach(row => {
          const cells = row.cells;
          const item = {
            productName: cells[0].textContent,
            quantity: cells[1].textContent,
            quantityUnit: cells[2].textContent
          };
          inventoryData.push(item);
        });

        localStorage.setItem('inventoryData', JSON.stringify(inventoryData));
      }

      // Load from local storage
      function loadFromLocalStorage() {
        const storedData = localStorage.getItem('inventoryData');
        if (storedData) {
          const parsedData = JSON.parse(storedData);
          parsedData.forEach(item => {
            addNewInventoryItem(item);
          });
        }
      }

      // Call loadFromLocalStorage when the page loads
      loadFromLocalStorage();
    });
  </script>
</body>
</html>
